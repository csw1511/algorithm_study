구현 - 풀이를 떠올리긴 쉽지만 소스코드로 옮기기 어려운 문제

1. 완전 탐색 - 모든 경우의 수를 주저없이 다 계산하는 해결방법
2. 시뮬레이션 - 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행해야 하는 방법

먼저 코딩테스트 채점시스템의 제약
=================================
변수 표현 범위
C/C++/JAVA에서는 자료형의 크기를 신경써야 함
파이썬에서는 프로그래머가 직접 자료형을 지정할 필요 없으며 매우 큰 수의 연산또한 기본 지원. / 다만 실수형 변수는 다른 언어와 마찬가지로 유효숫자에 따라 연산결과가 달라질 수 있다
===============================
파이썬에서의 리스트 크기
코딩 테스트의 메모리 제한(대부분 128~512MB)에 걸리지 않도록 주의하자.
때로는 수백만 개 이상의 데이터를 처리해야 하는 문제가 출제되곤 한다.
이때는 메모리 제한을 염두에 두어야 함
시스템 내부적으로 int자료형 데이터의 개수에 따른 메모리 사용량
1.000		/ 약 4KB
1.000.000		/ 약 4MB
10.000.000	/ 약 40MB

이런 문제는 또한 드문데, 출제에 어려움이 있어서다(입출력 문제, 채점)
====================================
채점 환경
보통 다음같은 제약이 걸린다
시간 제한: 1초
메모리 제한: 128MB

파이썬은 C++에 비해 동작속도가 느린데, 그래서 이 언어에 비해 2배의 수행시간을 적용하기도 한다.
나의 코드가 1초에 2000만 번의 연산을 수행한다고 가정하면 실행시간 제한에 안정적이다. 	/='1초' 에 '2000만번' '이천만번'
만약 시간제한 1초, 데이터 개수가 100만개라면 일반적으론 시간복잡도
O(NlogN) 이내의 알고리즘을 이용해야 한다.  N = 백만일 때 Nlog2N = 2천만 이기 때문이다.
================================
구현 문제 접근법
파이썬은 느린 편이지만 '똑같은'문법을 쓰는 Pypy3는 훨씬 더 빠르다
만약 테스트 환경이 Pypy를 지원한다면 이를 적극 이용하자

API 개발문제 
알고리즘 문제와 별개로 웹 서버/ 데이터 분석에 대한 기초 지식도 필요하다.
파이썬은 이에 또 유리함

========================
애초에 구현 유형과 그리디 유형은 별개가 아니라 하나의 문제에 함께 포함된 형태로 출제되는 경우가 많다