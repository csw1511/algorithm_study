##DFS : 깊이 우선 탐색 알고리즘(Depth-First Search)
##특정 경로로 탐색하다 특정 상황에서 최대한 깊숙이 들어가 노드를 방문한 후
##다시 돌아가 다른 경로를 탐색한다
##DFS는 스택 자료구조를 이용하며 구체적 동작은 다음과 같다
##1. 탐색 시작 노드를 스택에 삽입하고 방문처리
##2. 스택의 최상단 노드에 방문하지 않은 인접노드가 있으면 그를 스택에 넣고 방문처리
##방문하지 않은 인접노드가 없으면 스택에서 최상단 노드 pop
##3.2번 과정을 끝까지 반복
##**일반적으로 인접노드중 방문하지 않은 노드가 여러개면 번호가 낮은 순서부터 처
##DFS는 스택을 기초로 하기 때문에 구현이 간단하며, 실제로는 스택을 안써도 된다.
##탐색을 수행함에 있어 데이터개수가 N개인 경우 O(N)의 시간이 소요된다
##또한 스택을 이용하기에 재귀함수를 이용하면 매우 간결히 구현가능하다.
##한번 해보자!
def dfs(graph, v, visited):
    visited[v] = True   ##노드방문을 기록
    print(v, end=' ')   ##노드 한번 출력해보기
        
    for i in graph[v]:  ##v번 노드에 연결된 모든 노드에 접근한다는 의미
        if not visited[i]:  ##만약 v에 연결된 i번째 노드가 미방문이라면?
            dfs(graph, i, visited)  ##dfs 진행. 이 노드는 방문처리가 됨과 동
                                    ##시에 스택구조의 최상단 노드가 



graph = [
    [],
    [2,3,4],
    [3,6],
    [4,5, 6,7],
    [5,7],
    [7,8],
    [2,3],
    [3,4,5],
    [5]
]

visited = [False]*9##최초 visited는 전부 False 설정. 이 배열의 각 인덱스는
##해당노드의 번호를 의미.

dfs(graph, 1, visited)
